{"version":3,"sources":["components/Card.js","components/Cardlist.js","components/SearchBox.js","components/Scroll.js","constants.js","containers/App.js","actions.js","reducers.js","fonts/Stick_No_Bills/StickNoBills-VariableFont_wght.ttf","index.js"],"names":["Card","name","email","id","className","alt","src","CardList","robots","map","user","i","SearchBox","searchfield","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","CHANGE_SEARCH_FIELD","App","state","fetch","then","response","json","users","setState","this","searchField","onSearchChange","filteredRobots","filter","robot","toLowerCase","includes","length","Component","connect","dispatch","event","payload","target","value","intialState","logger","createLogger","store","createStore","action","Object","assign","applyMiddleware","ReactDOM","render","document","getElementById"],"mappings":"4MAceA,EAZF,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,KAAMC,EAAgB,EAAhBA,MAAOC,EAAS,EAATA,GAEzB,OACI,sBAAKC,UAAU,sDAAf,UACI,qBAAKC,IAAI,SAASC,IAAG,+BAA0BH,EAA1B,mBACrB,gCACI,6BAAKF,IACL,4BAAIC,W,8BCeLK,EArBE,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OAIhB,OACI,qBAAKJ,UAAU,KAAf,SAEQI,EAAOC,KAAI,SAACC,EAAMC,GACd,OACI,cAAC,EAAD,CAEIR,GAAIK,EAAOG,GAAGR,GACdF,KAAMO,EAAOG,GAAGV,KAChBC,MAAOM,EAAOG,GAAGT,OAHZS,SCClBC,EAZG,SAAC,GAAkC,EAAhCC,YAAiC,IAApBC,EAAmB,EAAnBA,aAC9B,OACI,qBAAKV,UAAU,MAAf,SACI,uBACIA,UAAU,mCACVW,KAAK,SACLC,YAAY,gBACZC,SAAUH,OCCXI,EARA,SAACC,GAEZ,OACI,qBAAKC,MAAO,CAAEC,UAAW,SAAUC,OAAQ,kBAAmBC,OAAQ,SAAtE,SACKJ,EAAMK,YCNNC,G,MAAsB,uBC4B7BC,E,kDACJ,aAAe,IAAD,8BACZ,gBACKC,MAAQ,CACXnB,OAAQ,IAHE,E,qDAcd,WAAqB,IAAD,OAClBoB,MAAM,8CACHC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAW,EAAKC,SAAS,CAAEzB,OAAQwB,S,oBAkB7C,WAIE,IAAQxB,EAAW0B,KAAKP,MAAhBnB,OACR,EAAwC0B,KAAKf,MAArCgB,EAAR,EAAQA,YAAaC,EAArB,EAAqBA,eAEfC,EAAiB7B,EAAO8B,QAAO,SAAAC,GACnC,OAAOA,EAAMtC,KAAKuC,cAAcC,SAASN,EAAYK,kBAGvD,OAAQhC,EAAOkC,OAGX,sBAAKtC,UAAU,KAAf,UACE,oBAAIA,UAAU,KAAd,yBACA,cAAC,EAAD,CAAWU,aAAcsB,IACzB,cAAC,EAAD,UAEE,cAAC,EAAD,CAAU5B,OAAQ6B,SAPxB,6C,GAhDYM,aAiEHC,eA9ES,SAAAjB,GACtB,MAAO,CACLQ,YAAaR,EAAMQ,gBAII,SAACU,GAC1B,MAAO,CACLT,eAAgB,SAACU,GAAD,OAAWD,ECrBU,CAGrC9B,KAAM,sBACNgC,QDiBmDD,EAAME,OAAOC,YAsErDL,CAA6ClB,GE3FtDwB,G,MCFS,IDEK,CAChBf,YAAa,K,QEYXgB,EAASC,yBACTC,EAAQC,aFVc,WAAuC,IAAtC3B,EAAqC,uDAA7BuB,EAAaK,EAAgB,uDAAP,GACvD,OAAQA,EAAOxC,OACNU,EACM+B,OAAOC,OAAO,GAAI9B,EAAO,CAAEQ,YAAaoB,EAAOR,UAE/CpB,IEKqB+B,YAAgBP,IACxDQ,IAASC,OACP,cAAC,IAAD,CAAUP,MAAOA,EAAjB,SACE,cAAC,EAAD,MAQFQ,SAASC,eAAe,W","file":"static/js/main.12fc977f.chunk.js","sourcesContent":["import React from \"react\";\n\nconst Card = ({ name, email, id }) => {\n    //const { name, email, id } = props;\n    return (\n        <div className='tc grow bg-light-green br3 pa3 ma2 dib bw2 shadow=5'>\n            <img alt='robots' src={`https://robohash.org/${id}?size=200x200`} />\n            <div>\n                <h1>{name}</h1>\n                <p>{email}</p>\n            </div>\n        </div>\n    );\n}\nexport default Card;","import React from 'react';\nimport Card from './Card';\n\nconst CardList = ({ robots }) => {\n    /*if (true) {\n        throw new Error('noooo');\n    }*/\n    return (\n        <div className='p2'>\n            {\n                robots.map((user, i) => {\n                    return (\n                        <Card\n                            key={i}\n                            id={robots[i].id}\n                            name={robots[i].name}\n                            email={robots[i].email}\n                        />\n                    );\n                })\n            }\n        </div>\n    );\n}\nexport default CardList;\n\n\n","import React from \"react\";\n\nconst SearchBox = ({ searchfield, searchChange }) => {\n    return (\n        <div className='pa2'>\n            <input\n                className='pa3 ba b--green bg-lightest-blue'\n                type='search'\n                placeholder='search robots'\n                onChange={searchChange}\n            />\n        </div>\n    );\n}\nexport default SearchBox;","import React from \"react\";\n\nconst Scroll = (props) => {\n\n    return (\n        <div style={{ overflowY: 'scroll', border: '1px solid black', height: '800px' }}>\n            {props.children}\n        </div>\n    );\n};\nexport default Scroll;","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';","//import logo from './logo.svg';\n//import React, { Component, useState, useEffect } from 'react';\nimport React, { Component, useState, useEffect } from 'react';\nimport CardList from '../components/Cardlist';\nimport SearchBox from '../components/SearchBox';\n//import { robots } from '../robots';\n//import { render } from 'react-dom';\nimport Scroll from '../components/Scroll';\n//import h1 from './fonts/StickNoBills/StickNoBills-VariableFont_wght.ttf';\n\nimport './App.css';\n//import ErrorBoundry from '../components/ErrorBoundry';\nimport { setSearchfield } from '../actions.js'\nimport { connect } from 'react-redux';\n\nconst mapStateToProps = state => {\n  return {\n    searchField: state.searchField\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    onSearchChange: (event) => dispatch(setSearchfield(event.target.value))\n  }\n}\n/* LUOKKA*/\n\nclass App extends Component {\n  constructor() {\n    super()\n    this.state = {\n      robots: []//,\n      //reduxissa pois  searchfield: ''\n    }\n  }\n  /* jos halutaan käyttää functiota componentDidMountin sijaan\n  \n  function App() {\n    const [robots, setRobots] = useState([])\n    const [searchfield, setSearchfield] = useState('')\n    const [count, setCount] = useState(0)*/\n\n  componentDidMount() {\n    fetch('https://jsonplaceholder.typicode.com/users')\n      .then(response => response.json())\n      .then(users => { this.setState({ robots: users }) });\n  }\n\n  /*KUN käytetään functiota ja count mukana\n   <button onClick={() => setCount(count + 1)}>Click!</button>\n  useEffect(() => {\n    fetch('https://jsonplaceholder.typicode.com/users')\n      .then(response => response.json())\n      .then(users => { setRobots(users) });\n  }, [count]) //only run if count chances*/\n\n  /*REDUX pois\n  onSearchChange = (event) => {\n    //functiossa const onSearchChange = (event) => {\n    this.setState({ searchfield: event.target.value })\n    //functiossa setSearchfield(event.target.value)\n  }*/\n  //class\n  render() {\n    /*classissa\n    const { robots, searchfield } = this.state;*/\n    //reduxin lailla alla\n    const { robots } = this.state;\n    const { searchField, onSearchChange } = this.props;\n    //functiossa const filteredRobots = robots.filter(robot => {\n    const filteredRobots = robots.filter(robot => {\n      return robot.name.toLowerCase().includes(searchField.toLowerCase());\n    })\n    //funtiossa  <SearchBox searchChange={this.onSearchChange} />\n    return !robots.length ?\n      <h1>Loading</h1> :\n      (\n        <div className='tc'>\n          <h1 className='f1'>RoboFriends</h1>\n          <SearchBox searchChange={onSearchChange} />\n          <Scroll>\n\n            <CardList robots={filteredRobots} />\n\n          </Scroll>\n        </div >\n      );\n\n  }\n}\n\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","import { CHANGE_SEARCH_FIELD } from \"./constants.js\";\n\nexport const setSearchfield = (text) => ({\n    //console.log(text);\n    //return {\n    type: 'CHANGE_SEARCH_FIELD',\n    payload: text\n    // }\n})","import { CHANGE_SEARCH_FIELD } from \"./constants\";\n\nconst intialState = {\n    searchField: ''\n}\n\nexport const searchRobots = (state = intialState, action = {}) => {\n    switch (action.type) {\n        case CHANGE_SEARCH_FIELD:\n            return Object.assign({}, state, { searchField: action.payload })\n        default:\n            return state;\n    }\n}","export default __webpack_public_path__ + \"static/media/StickNoBills-VariableFont_wght.18764ebd.ttf\";","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider, connect } from 'react-redux';\nimport { createStore, applyMiddleware } from 'redux';\nimport './index.css';\nimport Card from './components/Card';\nimport App from './containers/App.js'\nimport CardList from './components/Cardlist.js'\nimport reportWebVitals from './reportWebVitals';\nimport Tachyons from 'tachyons';\nimport { robots } from './robots';\nimport './fonts/Stick_No_Bills/StickNoBills-VariableFont_wght.ttf';\nimport { searchRobots } from './reducers';\nimport { createLogger } from 'redux-logger';\n\nconst logger = createLogger();\nconst store = createStore(searchRobots, applyMiddleware(logger))\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  /*<CardList robots={robots} />,\n  /* <div >\n     <Card id={robots[0].id} name={robots[0].name} email={robots[0].email} />\n     <Card id={robots[1].id} name={robots[1].name} email={robots[1].email} />\n     <Card id={robots[2].id} name={robots[2].name} email={robots[2].email} />\n   </div>,*/\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n//reportWebVitals();\n"],"sourceRoot":""}