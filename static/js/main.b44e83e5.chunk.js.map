{"version":3,"sources":["components/Card.js","components/Cardlist.js","components/SearchBox.js","components/Scroll.js","components/Header.js","constants.js","containers/App.js","actions.js","reducers.js","fonts/Stick_No_Bills/StickNoBills-VariableFont_wght.ttf","serviceWorkerRegistration.js","index.js"],"names":["Card","name","email","id","className","alt","src","CardList","robots","map","user","i","SearchBox","searchfield","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","Header","nextProps","nextState","Component","CHANGE_SEARCH_FIELD","REQUEST_ROBOTS_PENDING","REQUEST_ROBOTS_FAILED","REQUEST_ROBOTS_SUCCESS","App","this","onRequestRobots","searchField","onSearchChange","isPending","filteredRobots","filter","robot","toLowerCase","includes","connect","state","searchRobots","requestRobots","error","dispatch","event","payload","target","value","fetch","then","response","json","data","catch","intialState","intialStateRobots","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","createLogger","rootReducer","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","headers","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.b44e83e5.chunk.js","sourcesContent":["import React from \"react\";\n\nconst Card = ({ name, email, id }) => {\n    //const { name, email, id } = props;\n    return (\n        <div className='tc grow bg-light-green br3 pa3 ma2 dib bw2 shadow=5'>\n            <img alt='robots' src={`https://robohash.org/${id}?size=200x200`} />\n            <div>\n                <h1>{name}</h1>\n                <p>{email}</p>\n            </div>\n        </div>\n    );\n}\nexport default Card;","import React from 'react';\nimport Card from './Card';\n\nconst CardList = ({ robots }) => {\n    /*if (true) {\n        throw new Error('noooo');\n    }*/\n    return (\n        <div className='p2'>\n            {\n                robots.map((user, i) => {\n                    return (\n                        <Card\n                            key={i}\n                            id={robots[i].id}\n                            name={robots[i].name}\n                            email={robots[i].email}\n                        />\n                    );\n                })\n            }\n        </div>\n    );\n}\nexport default CardList;\n\n\n","import React from \"react\";\n\nconst SearchBox = ({ searchfield, searchChange }) => {\n    return (\n        <div className='pa2'>\n            <input\n                className='pa3 ba b--green bg-lightest-blue'\n                type='search'\n                placeholder='search robots'\n                onChange={searchChange}\n            />\n        </div>\n    );\n}\nexport default SearchBox;","import React from \"react\";\n\nconst Scroll = (props) => {\n\n    return (\n        <div style={{ overflowY: 'scroll', border: '1px solid black', height: '800px' }}>\n            {props.children}\n        </div>\n    );\n};\nexport default Scroll;","import React from \"react\";\nimport { Component } from \"react\";\n\nclass Header extends Component {\n    shouldComponentUpdate(nextProps, nextState) {\n        return false;\n    }\n    /* JOS ON JOKIN TILA tau props TULISI KÄYTTÄÄ TÄTÄ EIKÄ YLINTÄ shouldComponentUpdate(){\n         if(this.state) !== nextState.count){\n             return true\n         } \n         return false\n     }*/\n    render() {\n        return <h1 className='f1'>RoboFriends</h1>\n    }\n}\nexport default Header;\n","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCEES';","//import logo from './logo.svg';\n//import React, { Component, useState, useEffect } from 'react';\nimport React, { Component, useState, useEffect } from 'react';\nimport CardList from '../components/Cardlist';\nimport SearchBox from '../components/SearchBox';\n//import { robots } from '../robots';\n//import { render } from 'react-dom';\nimport Scroll from '../components/Scroll';\nimport Header from '../components/Header';\n//import h1 from './fonts/StickNoBills/StickNoBills-VariableFont_wght.ttf';\n\nimport './App.css';\n//import ErrorBoundry from '../components/ErrorBoundry';\nimport { setSearchfield, requestRobots } from '../actions.js'\nimport { connect } from 'react-redux';\n\nconst mapStateToProps = state => {\n  return {\n    /* redux\n    searchField: state.searchField*/\n    searchField: state.searchRobots.searchField,\n    robots: state.requestRobots.robots,\n    isPending: state.requestRobots.isPending,\n    error: state.requestRobots.error\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    onSearchChange: (event) => dispatch(setSearchfield(event.target.value)),\n    onRequestRobots: () => dispatch(requestRobots()) /*requestRobots(dispatch)*/\n  }\n}\n/* LUOKKA*/\n\nclass App extends Component {\n  /**reduxissa, asyncissa pois\n   *   constructor() {\n     super()\n     this.state = {\n       robots: []//,\n       //reduxissa pois  searchfield: ''\n     }\n   }\n   */\n  /* jos halutaan käyttää functiota componentDidMountin sijaan\n  \n  function App() {\n    const [robots, setRobots] = useState([])\n    const [searchfield, setSearchfield] = useState('')\n    const [count, setCount] = useState(0)*/\n\n  componentDidMount() {\n    /* reduxissa tämä, async pois\n      fetch('https://jsonplaceholder.typicode.com/users')\n        .then(response => response.json())\n        .then(users => { this.setState({ robots: users }) });\n        */\n    this.props.onRequestRobots();\n  }\n\n  /*KUN käytetään functiota ja count mukana\n   <button onClick={() => setCount(count + 1)}>Click!</button>\n  useEffect(() => {\n    fetch('https://jsonplaceholder.typicode.com/users')\n      .then(response => response.json())\n      .then(users => { setRobots(users) });\n  }, [count]) //only run if count chances*/\n\n  /*REDUX pois\n  onSearchChange = (event) => {\n    //functiossa const onSearchChange = (event) => {\n    this.setState({ searchfield: event.target.value })\n    //functiossa setSearchfield(event.target.value)\n  }*/\n  //class\n  render() {\n    /*classissa\n    const { robots, searchfield } = this.state;*/\n    /*reduxin lailla alla\n    const { robots } = this.state;*/\n    const { searchField, onSearchChange, robots, isPending } = this.props;\n    //functiossa const filteredRobots = robots.filter(robot => {\n    const filteredRobots = robots.filter(robot => {\n      return robot.name.toLowerCase().includes(searchField.toLowerCase());\n    })\n    //funtiossa  <SearchBox searchChange={this.onSearchChange} />\n    //redux return !robots.length ?\n    return isPending ?\n      <h1>Loading</h1> :\n      (\n        <div className='tc'>\n          <Header />\n          <SearchBox searchChange={onSearchChange} />\n          <Scroll>\n\n            <CardList robots={filteredRobots} />\n\n          </Scroll>\n        </div >\n      );\n\n  }\n}\n\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","import {\n    CHANGE_SEARCH_FIELD,\n    REQUEST_ROBOTS_PENDING,\n    REQUEST_ROBOTS_FAILED,\n    REQUEST_ROBOTS_SUCCESS\n} from \"./constants.js\";\n/* async lisää nämä ylimmäiseen import { REQUEST_ROBOTS_PENDING } from \"./constants.js\";\nimport { REQUEST_ROBOTS_FAILED } from \"./constants.js\";*/\n\nexport const setSearchfield = (text) => ({\n    //console.log(text);\n    //return {\n    type: 'CHANGE_SEARCH_FIELD',\n    payload: text\n    // }\n})\n\n/** async */\nexport const requestRobots = () => (dispatch) => {\n    dispatch({ type: REQUEST_ROBOTS_PENDING });\n    fetch('https://jsonplaceholder.typicode.com/users')\n        .then(response => response.json())\n        .then(data => dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: data }))\n        .catch(error => dispatch({ type: REQUEST_ROBOTS_FAILED, payload: error }))\n}\n","/*import { CHANGE_SEARCH_FIELD } from \"./constants\";*/\nimport { CHANGE_SEARCH_FIELD, REQUEST_ROBOTS_PENDING, REQUEST_ROBOTS_FAILED, REQUEST_ROBOTS_SUCCESS } from \"./constants.js\";\n\nconst intialState = {\n    searchField: ''\n}\n\nexport const searchRobots = (state = intialState, action = {}) => {\n    switch (action.type) {\n        case CHANGE_SEARCH_FIELD:\n            return Object.assign({}, state, { searchField: action.payload })\n        default:\n            return state;\n    }\n}\n\n/** async robots */\nconst intialStateRobots = {\n    isPending: false,\n    robots: [],\n    error: ''\n}\n/** async request robots, muutetaan intialstate -> intialstaterobots*/\nexport const requestRobots = (state = intialStateRobots, action = {}) => {\n    switch (action.type) {\n        case REQUEST_ROBOTS_PENDING:\n            return Object.assign({}, state, { isPending: true })\n\n        case REQUEST_ROBOTS_SUCCESS:\n            return Object.assign({}, state, { robots: action.payload, isPending: false })\n\n        case REQUEST_ROBOTS_FAILED:\n            return Object.assign({}, state, { error: action.payload, isPending: false })\n        default:\n            return state;\n\n    }\n}","export default __webpack_public_path__ + \"static/media/StickNoBills-VariableFont_wght.18764ebd.ttf\";","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider, connect } from 'react-redux';\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\nimport './index.css';\nimport Card from './components/Card';\nimport App from './containers/App.js'\nimport CardList from './components/Cardlist.js'\nimport reportWebVitals from './reportWebVitals';\nimport Tachyons from 'tachyons';\nimport thunkMiddleware from 'redux-thunk';\nimport { robots } from './robots';\nimport './fonts/Stick_No_Bills/StickNoBills-VariableFont_wght.ttf';\nimport { searchRobots, requestRobots } from './reducers';\nimport { createLogger } from 'redux-logger';\n//import * as serviceWorker from './serviceWorker';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\n\nconst logger = createLogger();\n/**async rootReducer */\nconst rootReducer = combineReducers({ searchRobots, requestRobots })\n/**async rootReducer */\n//const store = createStore(rootReducer, applyMiddleware(thunkMiddleware, logger))\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware))\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  /*<CardList robots={robots} />,\n  /* <div >\n     <Card id={robots[0].id} name={robots[0].name} email={robots[0].email} />\n     <Card id={robots[1].id} name={robots[1].name} email={robots[1].email} />\n     <Card id={robots[2].id} name={robots[2].name} email={robots[2].email} />\n   </div>,*/\n  document.getElementById('root')\n);\n//registerServiceWorker();\n//serviceWorker.register();\nserviceWorkerRegistration.register();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n//reportWebVitals();\n"],"sourceRoot":""}